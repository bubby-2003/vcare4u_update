package com.vcare4u.patientservice;



import com.fasterxml.jackson.databind.ObjectMapper;
import com.vcare4u.patientservice.controller.PatientController;
import com.vcare4u.patientservice.dto.PatientDto;
import com.vcare4u.patientservice.exception.ResourceNotFoundException;
import com.vcare4u.patientservice.service.PatientService;
import com.vcare4u.patientservice.config.JwtUtils;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.HashMap;
import java.util.Map;

import static org.mockito.ArgumentMatchers.anyLong;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(PatientController.class)
class GlobalExceptionHandlerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private PatientService patientService;

    @MockBean
    private JwtUtils jwtUtils;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    void testResourceNotFoundException() throws Exception {
        // Mock token and role
        Mockito.when(jwtUtils.extractUsernameFromRequest(Mockito.any())).thenReturn("admin@example.com");
        Mockito.when(jwtUtils.extractRoleFromRequest(Mockito.any())).thenReturn("ADMIN");

        // Simulate not found
        Mockito.when(patientService.getPatientById(anyLong()))
                .thenThrow(new ResourceNotFoundException("Patient", "id", 999));

        mockMvc.perform(get("/api/patients/999"))
                .andExpect(status().isNotFound())
                .andExpect(jsonPath("$.error").value("Not Found"))
                .andExpect(jsonPath("$.message").value("Patient not found with id : '999'"));
    }

    @Test
    void testValidationException() throws Exception {
        // Invalid DTO (fullName is required)
        Map<String, String> badDto = new HashMap<>();
        badDto.put("email", "bad@example.com");

        mockMvc.perform(post("/api/patients")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(badDto)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.fullName").value("Full name is required"));
    }

    @Test
    void testGenericExceptionHandler() throws Exception {
        // Mock token and role
        Mockito.when(jwtUtils.extractUsernameFromRequest(Mockito.any())).thenReturn("admin@example.com");
        Mockito.when(jwtUtils.extractRoleFromRequest(Mockito.any())).thenReturn("ADMIN");

        Mockito.when(patientService.getPatientById(anyLong()))
                .thenThrow(new RuntimeException("Unexpected failure"));

        mockMvc.perform(get("/api/patients/1"))
                .andExpect(status().isInternalServerError())
                .andExpect(jsonPath("$.error").value("Server Error"))
                .andExpect(jsonPath("$.message").value("Unexpected failure"));
    }
}
